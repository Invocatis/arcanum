(doc resolve )
((the-ns (symbol "clojure.lang.PersistentHashMap"))
(the-ns (symbol "clojure.lang.PersistentHashMap"))
clojure.lang.PersistentHashMap 
(Class/forName "clojure.lang.PersistentHashMap")
(Class/forName "flatland.ordered.map.OrderedMap")
clojure.lang.PersistentHashMap/EMPTY
(.getConstructor clojure.lang.PersistentHashMap )
(.getConstructor clojure.lang.PersistentHashMap (object-array 0))
(.getConstructor clojure.lang.PersistentHashMap (object-array java.lang.Class 0))
(object-array)
object-array
(doc object-array )
(.getConstructor clojure.lang.PersistentHashMap (make-array java.lang.Class 0))
(.getConstructor (class  clojure.lang.PersistentHashMap) (make-array java.lang.Class 0))
(class clojure.lang.PersistentHashMap )
(.getConstructors (class  clojure.lang.PersistentHashMap) (make-array java.lang.Class 0))
(.getConstructors (class  clojure.lang.PersistentHashMap))
(.getConstructors (class  clojure.lang.PersistentHashMap) (make-array java.lang.Class 0))
(require 'clojure.reflect)
(clojure.reflect/->Constructor clojure.lang.PersistentHashMap )
(doc clojure.reflect/->Constructor )
(clojure.reflect/->Constructor "" clojure.lang.PersistentHashMap [] [] [])
(clojure.reflect/reflect clojure.lang.PersistentHashMap)
(def x *1)
(keys x)
(-> x :members keys)
(-> x :members)
(.create clojure.lang.PersistentHashMap )
(clojure.lang.PersistentHashMap/create )
(clojure.lang.PersistentHashMap/create 1 1)
(clojure.lang.PersistentHashMap/create [])
(clojure.lang.PersistentHashMap. nil)
(clojure.lang.PersistentHashMap. nil nil nil nil)
(clojure.lang.PersistentHashMap. nil nil false nil)
(clojure.lang.PersistentHashMap/create {})
flatland.ordered.map
flatland.ordered.map.OrderMap
flatland.ordered.map/OrderedMap
(flatland.ordered.map/ordered-map )
(type *1)
flatland.ordered.map.OrderedMap
(flatland.ordered.map.OrderedMap.)
(flatland.ordered.map.OrderedMap/create {})
(doc resolve)
(resolve 'asdf0
(resolve 'asdf)
(resolve 'inc)
(resolve 'flatland.ordered.set.OrderedSet)
(import 'flatland.ordered.set.OrderedSet)
(Class/forName "asdf")
(Class/forName "flatland.ordered.set.OrderedSet')
(Class/forName "flatland.ordered.set.OrderedSet")
flatland.ordered.set.OrderedSet
(Class/forName "flatland.ordered.set.OrderedSet')
(Class/forName "flatland.ordered.set.OrderedSet")
(require '[flatland.ordered.set ])
(Class/forName "flatland.ordered.set.OrderedSet')
(Class/forName "flatland.ordered.set.OrderedSet")
(clojure.string/replace org.springframework.web.client.HttpServerErrorException: 500 null  at org.springframework.web.client.DefaultResponseErrorHandler.handleError (DefaultResponseErrorHandler.java:94)     org.springframework.web.client.RestTemplate.handleResponse (RestTemplate.java:641)     org.springframework.web.client.RestTemplate.doExecute (RestTemplate.java:597)     org.springframework.web.client.RestTemplate.execute (RestTemplate.java:557)     org.springframework.web.client.RestTemplate.exchange (RestTemplate.java:475)     org.gobii.bert.ComponentsUtil.post (ComponentsUtil.java:62)     org.gobii.bert.Components.loaderProcedure (Components.java:629)     org.gobii.bert.Components.load (Components.java:663)     sun.reflect.NativeMethodAccessorImpl.invoke0 (NativeMethodAccessorImpl.java:-2)     sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     java.lang.reflect.Method.invoke (Method.java:498)     sun.reflect.GeneratedMethodAccessor11.invoke (:-1)     sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     java.lang.reflect.Method.invoke (Method.java:498)     clojure.lang.Reflector.invokeMatchingMethod (Reflector.java:167)     clojure.lang.Reflector.invokeInstanceMethod (Reflector.java:102)     ernie.util$wrap_method$fn__1738.doInvoke (util.clj:196)     clojure.lang.RestFn.applyTo (RestFn.java:137)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$invoke_action.invokeStatic (semantics.clj:110)     ernie.semantics$invoke_action.invoke (semantics.clj:107)     ernie.semantics$eval_BAR_action.invokeStatic (semantics.clj:132)     ernie.semantics$eval_BAR_action.invoke (semantics.clj:127)     clojure.lang.AFn.applyToHelper (AFn.java:156)     clojure.lang.AFn.applyTo (AFn.java:144)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:344)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     ernie.semantics$__GT_fn$fn__4320.doInvoke (semantics.clj:219)     clojure.lang.RestFn.applyTo (RestFn.java:137)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_call.invokeStatic (semantics.clj:203)     ernie.semantics$eval_BAR_call.invoke (semantics.clj:197)     clojure.lang.AFn.applyToHelper (AFn.java:156)     clojure.lang.AFn.applyTo (AFn.java:144)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:344)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     clojure.core$partial$fn__5824.invoke (core.clj:2624)     clojure.core$map$fn__5851.invoke (core.clj:2753)     clojure.lang.LazySeq.sval (LazySeq.java:42)     clojure.lang.LazySeq.seq (LazySeq.java:51)     clojure.lang.RT.seq (RT.java:531)     clojure.core$seq__5387.invokeStatic (core.clj:137)     clojure.core.protocols$seq_reduce.invokeStatic (protocols.clj:24)     clojure.core.protocols$fn__8131.invokeStatic (protocols.clj:75)     clojure.core.protocols/fn (protocols.clj:75)     clojure.core.protocols$fn__8073$G__8068__8086.invoke (protocols.clj:13)     clojure.core$reduce.invokeStatic (core.clj:6828)     clojure.core$into.invokeStatic (core.clj:6895)     clojure.core$into.invoke (core.clj:6887)     ernie.semantics$eval_STAR_.invokeStatic (semantics.clj:324)     ernie.semantics$eval_STAR_.invoke (semantics.clj:322)     ernie.semantics$eval_BAR_args.invokeStatic (semantics.clj:330)     ernie.semantics$eval_BAR_args.invoke (semantics.clj:326)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:342)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     clojure.core$partial$fn__5824.invoke (core.clj:2624)     clojure.core$map$fn__5851.invoke (core.clj:2753)     clojure.lang.LazySeq.sval (LazySeq.java:42)     clojure.lang.LazySeq.seq (LazySeq.java:51)     clojure.lang.RT.seq (RT.java:531)     clojure.core$seq__5387.invokeStatic (core.clj:137)     clojure.core.protocols$seq_reduce.invokeStatic (protocols.clj:24)     clojure.core.protocols$fn__8131.invokeStatic (protocols.clj:75)     clojure.core.protocols/fn (protocols.clj:75)     clojure.core.protocols$fn__8073$G__8068__8086.invoke (protocols.clj:13)     clojure.core$reduce.invokeStatic (core.clj:6828)     clojure.core$into.invokeStatic (core.clj:6895)     clojure.core$into.invoke (core.clj:6887)     ernie.semantics$eval_STAR_.invokeStatic (semantics.clj:324)     ernie.semantics$eval_STAR_.invoke (semantics.clj:322)     ernie.semantics$eval_BAR_args.invokeStatic (semantics.clj:330)     ernie.semantics$eval_BAR_args.invoke (semantics.clj:326)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:342)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     ernie.semantics$__GT_fn$fn__4320.doInvoke (semantics.clj:219)     clojure.lang.RestFn.applyTo (RestFn.java:137)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_call.invokeStatic (semantics.clj:204)     ernie.semantics$eval_BAR_call.invoke (semantics.clj:197)     clojure.lang.AFn.applyToHelper (AFn.java:156)     clojure.lang.AFn.applyTo (AFn.java:144)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:344)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     ernie.semantics$eval_BAR_if.invokeStatic (semantics.clj:308)     ernie.semantics$eval_BAR_if.invoke (semantics.clj:305)     clojure.lang.AFn.applyToHelper (AFn.java:156)     clojure.lang.AFn.applyTo (AFn.java:144)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:341)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     clojure.core$partial$fn__5824.invoke (core.clj:2624)     clojure.core$map$fn__5851.invoke (core.clj:2753)     clojure.lang.LazySeq.sval (LazySeq.java:42)     clojure.lang.LazySeq.seq (LazySeq.java:51)     clojure.lang.RT.seq (RT.java:531)     clojure.core$seq__5387.invokeStatic (core.clj:137)     clojure.core.protocols$seq_reduce.invokeStatic (protocols.clj:24)     clojure.core.protocols$fn__8131.invokeStatic (protocols.clj:75)     clojure.core.protocols/fn (protocols.clj:75)     clojure.core.protocols$fn__8073$G__8068__8086.invoke (protocols.clj:13)     clojure.core$reduce.invokeStatic (core.clj:6828)     clojure.core$into.invokeStatic (core.clj:6895)     clojure.core$into.invoke (core.clj:6887)     ernie.semantics$eval_STAR_.invokeStatic (semantics.clj:324)     ernie.semantics$eval_STAR_.invoke (semantics.clj:322)     ernie.semantics$eval_BAR_args.invokeStatic (semantics.clj:330)     ernie.semantics$eval_BAR_args.invoke (semantics.clj:326)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:342)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     clojure.core$partial$fn__5824.invoke (core.clj:2624)     clojure.core$map$fn__5851.invoke (core.clj:2753)     clojure.lang.LazySeq.sval (LazySeq.java:42)     clojure.lang.LazySeq.seq (LazySeq.java:51)     clojure.lang.RT.seq (RT.java:531)     clojure.core$seq__5387.invokeStatic (core.clj:137)     clojure.core.protocols$seq_reduce.invokeStatic (protocols.clj:24)     clojure.core.protocols$fn__8131.invokeStatic (protocols.clj:75)     clojure.core.protocols/fn (protocols.clj:75)     clojure.core.protocols$fn__8073$G__8068__8086.invoke (protocols.clj:13)     clojure.core$reduce.invokeStatic (core.clj:6828)     clojure.core$into.invokeStatic (core.clj:6895)     clojure.core$into.invoke (core.clj:6887)     ernie.semantics$eval_STAR_.invokeStatic (semantics.clj:324)     ernie.semantics$eval_STAR_.invoke (semantics.clj:322)     ernie.semantics$eval_BAR_args.invokeStatic (semantics.clj:330)     ernie.semantics$eval_BAR_args.invoke (semantics.clj:326)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:342)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     ernie.semantics$__GT_fn$fn__4320.doInvoke (semantics.clj:219)     clojure.lang.RestFn.applyTo (RestFn.java:137)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_call.invokeStatic (semantics.clj:203)     ernie.semantics$eval_BAR_call.invoke (semantics.clj:197)     clojure.lang.AFn.applyToHelper (AFn.java:156)     clojure.lang.AFn.applyTo (AFn.java:144)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:344)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     clojure.core$partial$fn__5824.invoke (core.clj:2624)     clojure.core$map$fn__5851.invoke (core.clj:2753)     clojure.lang.LazySeq.sval (LazySeq.java:42)     clojure.lang.LazySeq.seq (LazySeq.java:51)     clojure.lang.RT.seq (RT.java:531)     clojure.core$seq__5387.invokeStatic (core.clj:137)     clojure.core.protocols$seq_reduce.invokeStatic (protocols.clj:24)     clojure.core.protocols$fn__8131.invokeStatic (protocols.clj:75)     clojure.core.protocols/fn (protocols.clj:75)     clojure.core.protocols$fn__8073$G__8068__8086.invoke (protocols.clj:13)     clojure.core$reduce.invokeStatic (core.clj:6828)     clojure.core$into.invokeStatic (core.clj:6895)     clojure.core$into.invoke (core.clj:6887)     ernie.semantics$eval_STAR_.invokeStatic (semantics.clj:324)     ernie.semantics$eval_STAR_.invoke (semantics.clj:322)     ernie.semantics$eval_BAR_args.invokeStatic (semantics.clj:330)     ernie.semantics$eval_BAR_args.invoke (semantics.clj:326)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:342)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     clojure.core$partial$fn__5824.invoke (core.clj:2624)     clojure.core$map$fn__5851.invoke (core.clj:2753)     clojure.lang.LazySeq.sval (LazySeq.java:42)     clojure.lang.LazySeq.seq (LazySeq.java:51)     clojure.lang.RT.seq (RT.java:531)     clojure.core$seq__5387.invokeStatic (core.clj:137)     clojure.core.protocols$seq_reduce.invokeStatic (protocols.clj:24)     clojure.core.protocols$fn__8131.invokeStatic (protocols.clj:75)     clojure.core.protocols/fn (protocols.clj:75)     clojure.core.protocols$fn__8073$G__8068__8086.invoke (protocols.clj:13)     clojure.core$reduce.invokeStatic (core.clj:6828)     clojure.core$into.invokeStatic (core.clj:6895)     clojure.core$into.invoke (core.clj:6887)     ernie.semantics$eval_STAR_.invokeStatic (semantics.clj:324)     ernie.semantics$eval_STAR_.invoke (semantics.clj:322)     ernie.semantics$__GT_test_fn$fn__4279$fn__4280.invoke (semantics.clj:158)     ernie.semantics$__GT_test_fn$fn__4279.invoke (semantics.clj:157)     ernie.semantics$handle_scenario$fn__4286.invoke (semantics.clj:174)     ernie.semantics$handle_scenario.invokeStatic (semantics.clj:173)     ernie.semantics$handle_scenario.invoke (semantics.clj:165)     ernie.semantics$eval_BAR_block.invokeStatic (semantics.clj:188)     ernie.semantics$eval_BAR_block.invoke (semantics.clj:183)     clojure.lang.AFn.applyToHelper (AFn.java:156)     clojure.lang.AFn.applyTo (AFn.java:144)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:344)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     ernie.semantics$eval_BAR_expressions_STAR_.invokeStatic (semantics.clj:354)     ernie.semantics$eval_BAR_expressions_STAR_.invoke (semantics.clj:349)     ernie.semantics$sub.invokeStatic (semantics.clj:378)     ernie.semantics$sub.invoke (semantics.clj:373)     ernie.semantics$eval_BAR_expressions.invokeStatic (semantics.clj:400)     ernie.semantics$eval_BAR_expressions.invoke (semantics.clj:396)     ernie.core$run.invokeStatic (core.clj:22)     ernie.core$run.invoke (core.clj:16)     ernie.java$run_string.invokeStatic (java.clj:98)     ernie.java$run_string.invoke (java.clj:96)     ernie.java$run_file.invokeStatic (java.clj:104)     ernie.java$run_file.invoke (java.clj:102)     ernie.core.Ernie.runFile (:-1)     org.gobii.bert.BertUtils.ernie (BertUtils.java:151)     sun.reflect.NativeMethodAccessorImpl.invoke0 (NativeMethodAccessorImpl.java:-2)     sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     java.lang.reflect.Method.invoke (Method.java:498)     sun.reflect.GeneratedMethodAccessor11.invoke (:-1)     sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     java.lang.reflect.Method.invoke (Method.java:498)     clojure.lang.Reflector.invokeMatchingMethod (Reflector.java:167)     clojure.lang.Reflector.invokeInstanceMethod (Reflector.java:102)     ernie.util$wrap_method$fn__1738.doInvoke (util.clj:196)     clojure.lang.RestFn.applyTo (RestFn.java:137)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$invoke_action.invokeStatic (semantics.clj:110)     ernie.semantics$invoke_action.invoke (semantics.clj:107)     ernie.semantics$eval_BAR_action.invokeStatic (semantics.clj:132)     ernie.semantics$eval_BAR_action.invoke (semantics.clj:127)     clojure.lang.AFn.applyToHelper (AFn.java:156)     clojure.lang.AFn.applyTo (AFn.java:144)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:344)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     clojure.core$partial$fn__5824.invoke (core.clj:2624)     clojure.core$map$fn__5851.invoke (core.clj:2753)     clojure.lang.LazySeq.sval (LazySeq.java:42)     clojure.lang.LazySeq.seq (LazySeq.java:51)     clojure.lang.RT.seq (RT.java:531)     clojure.core$seq__5387.invokeStatic (core.clj:137)     clojure.core.protocols$seq_reduce.invokeStatic (protocols.clj:24)     clojure.core.protocols$fn__8131.invokeStatic (protocols.clj:75)     clojure.core.protocols/fn (protocols.clj:75)     clojure.core.protocols$fn__8073$G__8068__8086.invoke (protocols.clj:13)     clojure.core$reduce.invokeStatic (core.clj:6828)     clojure.core$into.invokeStatic (core.clj:6895)     clojure.core$into.invoke (core.clj:6887)     ernie.semantics$eval_STAR_.invokeStatic (semantics.clj:324)     ernie.semantics$eval_STAR_.invoke (semantics.clj:322)     ernie.semantics$eval_BAR_args.invokeStatic (semantics.clj:330)     ernie.semantics$eval_BAR_args.invoke (semantics.clj:326)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:342)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     ernie.semantics$__GT_fn$fn__4320.doInvoke (semantics.clj:219)     clojure.lang.RestFn.invoke (RestFn.java:408)     clojure.core$map$fn__5851.invoke (core.clj:2753)     clojure.lang.LazySeq.sval (LazySeq.java:42)     clojure.lang.LazySeq.seq (LazySeq.java:51)     clojure.lang.Cons.next (Cons.java:39)     clojure.lang.RT.next (RT.java:709)     clojure.core$next__5371.invokeStatic (core.clj:64)     clojure.core$dorun.invokeStatic (core.clj:3142)     clojure.core$doall.invokeStatic (core.clj:3148)     clojure.core$doall.invoke (core.clj:3148)     clojure.core$comp$fn__5792.invoke (core.clj:2570)     clojure.lang.AFn.applyToHelper (AFn.java:156)     clojure.lang.RestFn.applyTo (RestFn.java:132)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_call.invokeStatic (semantics.clj:204)     ernie.semantics$eval_BAR_call.invoke (semantics.clj:197)     clojure.lang.AFn.applyToHelper (AFn.java:156)     clojure.lang.AFn.applyTo (AFn.java:144)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:344)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     clojure.core$partial$fn__5824.invoke (core.clj:2624)     clojure.core$map$fn__5851.invoke (core.clj:2753)     clojure.lang.LazySeq.sval (LazySeq.java:42)     clojure.lang.LazySeq.seq (LazySeq.java:51)     clojure.lang.RT.seq (RT.java:531)     clojure.core$seq__5387.invokeStatic (core.clj:137)     clojure.core.protocols$seq_reduce.invokeStatic (protocols.clj:24)     clojure.core.protocols$fn__8131.invokeStatic (protocols.clj:75)     clojure.core.protocols/fn (protocols.clj:75)     clojure.core.protocols$fn__8073$G__8068__8086.invoke (protocols.clj:13)     clojure.core$reduce.invokeStatic (core.clj:6828)     clojure.core$into.invokeStatic (core.clj:6895)     clojure.core$into.invoke (core.clj:6887)     ernie.semantics$eval_STAR_.invokeStatic (semantics.clj:324)     ernie.semantics$eval_STAR_.invoke (semantics.clj:322)     ernie.semantics$handle_suite.invokeStatic (semantics.clj:148)     ernie.semantics$handle_suite.invoke (semantics.clj:142)     ernie.semantics$eval_BAR_block.invokeStatic (semantics.clj:187)     ernie.semantics$eval_BAR_block.invoke (semantics.clj:183)     clojure.lang.AFn.applyToHelper (AFn.java:156)     clojure.lang.AFn.applyTo (AFn.java:144)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:344)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     ernie.semantics$eval_BAR_expressions_STAR_.invokeStatic (semantics.clj:354)     ernie.semantics$eval_BAR_expressions_STAR_.invoke (semantics.clj:349)     ernie.semantics$sub.invokeStatic (semantics.clj:378)     ernie.semantics$sub.invoke (semantics.clj:373)     ernie.semantics$eval_BAR_expressions.invokeStatic (semantics.clj:400)     ernie.semantics$eval_BAR_expressions.invoke (semantics.clj:396)     ernie.core$run.invokeStatic (core.clj:22)     ernie.core$run.invoke (core.clj:16)     ernie.java$run_string.invokeStatic (java.clj:98)     ernie.java$run_string.invoke (java.clj:96)     ernie.java$run_file.invokeStatic (java.clj:104)     ernie.java$run_file.invoke (java.clj:102)     ernie.core.Ernie.runFile (:-1)     org.gobii.bert.BertUtils.ernie (BertUtils.java:151)     sun.reflect.NativeMethodAccessorImpl.invoke0 (NativeMethodAccessorImpl.java:-2)     sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     java.lang.reflect.Method.invoke (Method.java:498)     sun.reflect.NativeMethodAccessorImpl.invoke0 (NativeMethodAccessorImpl.java:-2)     sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     java.lang.reflect.Method.invoke (Method.java:498)     clojure.lang.Reflector.invokeMatchingMethod (Reflector.java:167)     clojure.lang.Reflector.invokeInstanceMethod (Reflector.java:102)     ernie.util$wrap_method$fn__1738.doInvoke (util.clj:196)     clojure.lang.RestFn.applyTo (RestFn.java:137)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$invoke_action.invokeStatic (semantics.clj:110)     ernie.semantics$invoke_action.invoke (semantics.clj:107)     ernie.semantics$eval_BAR_action.invokeStatic (semantics.clj:132)     ernie.semantics$eval_BAR_action.invoke (semantics.clj:127)     clojure.lang.AFn.applyToHelper (AFn.java:156)     clojure.lang.AFn.applyTo (AFn.java:144)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:344)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     clojure.core$partial$fn__5824.invoke (core.clj:2624)     clojure.core$map$fn__5851.invoke (core.clj:2753)     clojure.lang.LazySeq.sval (LazySeq.java:42)     clojure.lang.LazySeq.seq (LazySeq.java:51)     clojure.lang.RT.seq (RT.java:531)     clojure.core$seq__5387.invokeStatic (core.clj:137)     clojure.core.protocols$seq_reduce.invokeStatic (protocols.clj:24)     clojure.core.protocols$fn__8131.invokeStatic (protocols.clj:75)     clojure.core.protocols/fn (protocols.clj:75)     clojure.core.protocols$fn__8073$G__8068__8086.invoke (protocols.clj:13)     clojure.core$reduce.invokeStatic (core.clj:6828)     clojure.core$into.invokeStatic (core.clj:6895)     clojure.core$into.invoke (core.clj:6887)     ernie.semantics$eval_STAR_.invokeStatic (semantics.clj:324)     ernie.semantics$eval_STAR_.invoke (semantics.clj:322)     ernie.semantics$eval_BAR_args.invokeStatic (semantics.clj:330)     ernie.semantics$eval_BAR_args.invoke (semantics.clj:326)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:342)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     ernie.semantics$__GT_fn$fn__4320.doInvoke (semantics.clj:219)     clojure.lang.RestFn.invoke (RestFn.java:408)     clojure.core$map$fn__5851.invoke (core.clj:2755)     clojure.lang.LazySeq.sval (LazySeq.java:42)     clojure.lang.LazySeq.seq (LazySeq.java:51)     clojure.lang.RT.seq (RT.java:531)     clojure.core$seq__5387.invokeStatic (core.clj:137)     clojure.core$dorun.invokeStatic (core.clj:3133)     clojure.core$doall.invokeStatic (core.clj:3148)     clojure.core$doall.invoke (core.clj:3148)     clojure.core$comp$fn__5792.invoke (core.clj:2570)     clojure.lang.AFn.applyToHelper (AFn.java:156)     clojure.lang.RestFn.applyTo (RestFn.java:132)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_call.invokeStatic (semantics.clj:204)     ernie.semantics$eval_BAR_call.invoke (semantics.clj:197)     clojure.lang.AFn.applyToHelper (AFn.java:156)     clojure.lang.AFn.applyTo (AFn.java:144)     clojure.core$apply.invokeStatic (core.clj:665)     clojure.core$apply.invoke (core.clj:660)     ernie.semantics$eval_BAR_exp.invokeStatic (semantics.clj:344)     ernie.semantics$eval_BAR_exp.invoke (semantics.clj:334)     ernie.semantics$eval_BAR_expressions_STAR_.invokeStatic (semantics.clj:354)     ernie.semantics$eval_BAR_expressions_STAR_.invoke (semantics.clj:349)     ernie.semantics$sub.invokeStatic (semantics.clj:378)     ernie.semantics$sub.invoke (semantics.clj:373)     ernie.semantics$root.invokeStatic (semantics.clj:390)     ernie.semantics$root.invoke (semantics.clj:383)     ernie.semantics$eval_BAR_expressions.invokeStatic (semantics.clj:399)     ernie.semantics$eval_BAR_expressions.invoke (semantics.clj:396)     ernie.core$run.invokeStatic (core.clj:22)     ernie.core$run.invoke (core.clj:16)     ernie.java$run_string.invokeStatic (java.clj:98)     ernie.java$run_string.invoke (java.clj:96)     ernie.core.Ernie.runScript (:-1)     org.gobii.bert.Bert.main (Bert.java:44)
(require '[clojure.reflect :as r])
(r/resolve-class "flatland.ordered.set.OrderedSet")
(doc r/resolve-class )
(r/resolve-class 'flatland.ordered.set.OrderedSet)
(defn class-exists? [c] 
  (resolve-class (.getContextClassLoader (Thread/currentThread)) c))
(defn class-exists? [c] 
  (r/resolve-class (.getContextClassLoader (Thread/currentThread)) c))
(class-exists? 'flatland.ordered.set.OrderedSet)
(require '[flatland.ordered.set ])
(class-exists? 'flatland.ordered.set.OrderedSet)
flatland.ordered.set.OrderedSet
(class-exists? 'flatland.ordered.set.OrderedSet)
loaded-libs 
(loaded-libs )
(pprint *1)
(pprint (loaded-libs))
(count *1)
(doc loaded-libs )
(require '[bultitude.core :as b])
(b/namespaces-on-classpath )
(contains? *1 'flatland.ordered.map)
(into #{} (b/namespaces-on-classpath ))
(contains? *1 'flatland.ordered.map)
(source b/namespaces-on-classpath 
)
(source b/namespace-forms-on-classpath )
(require '[taoensso.nippy :as n])
(n/freeze {})
(n/thaw (n/freeze {}))
(type (n/thaw (n/freeze {})))
(contains? *1 'flatland.ordered.map)
(require '[flatland.ordered.set ])
(type (n/thaw (n/freeze (flatland.ordered.map/ordered-map))))
(require '[flatland.ordered.map ])
(type (n/thaw (n/freeze (flatland.ordered.map/ordered-map))))
(n/freeze (flatland.ordered.map/ordered-map)))
(n/freeze (flatland.ordered.map/ordered-map))
(slurp (n/freeze (flatland.ordered.map/ordered-map)))
(require '[flatland.ordered.map ])
flatland.ordered.map.OrderedMap
(flatland.ordered.map/ordered-map)
(def x *1)
(.backing-map x)
(.order x)
(def x (flatland.ordered.map/ordered-map 1 1 2 2 3 3))
x
(.backing-map x)
(.order x)
(flatland.ordered.map.OrderedMap. {} [])
(flatland.ordered.map.OrderedMap. (.backing-map x) [])
(flatland.ordered.map.OrderedMap. (.backing-map x) (.order x))
(array-map 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10)
(type *1)
(array-map 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10)
(assoc *1 11 11)
(type *1)
(def x 1)
(set! x 2)
(set! #'x 2)
(set! 'x 2)
*warn-on-reflection* 
(set! *warn-on-reflection* true)
*warn-on-reflection* 
(def ^:dynamic x 1)
(set! #'racoon.server/x 2)
(set! racoon.server/x 2)
(def x (var 1))
(def x (var))
(source *warn-on-reflection* )
(use 'racoon.server :reload)
(use 'racoon.model.menu :reload) (use 'racoon.model :reload)
read
(racoon.model/dispatch racoon.model.menu/model)
(use 'racoon.model.menu :reload) (use 'racoon.model :reload)
(racoon.model/dispatch racoon.model.menu/model)
(use 'racoon.model.menu :reload) (use 'racoon.model :reload)
se
(use 'racoon.model.menu :reload) (use 'racoon.model :reload)
(racoon.model/dispatch racoon.model.menu/model)
(use 'racoon.database :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :read)
(use 'racoon.database :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :read)
(use 'racoon.database :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :read)
(use 'racoon.model.menu :reload) (use 'racoon.model :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :read)
(use 'racoon.model.menu :reload) (use 'racoon.model :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :read)
(use 'racoon.model.menu :reload) (use 'racoon.model :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :read)
(use 'racoon.model.menu :reload) (use 'racoon.model :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :read)
(use 'racoon.database :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :read)
(use 'racoon.database :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :read)
(use 'racoon.database :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :read)
(use 'racoon.model.menu :reload) (use 'racoon.model :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :read)
(use 'racoon.model.menu :reload) (use 'racoon.model :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :read)
(use 'racoon.database :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :read)
(use 'racoon.database :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :read)
(racoon.model/dispatch db-spec racoon.model.menu/model :get)
(use 'racoon.database :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :get)
(use 'racoon.database :reload)
(racoon.model/dispatch db-spec racoon.model.menu/model :get)
(source clojure.core.incubator/dissoc-in )
(source clojure.core.incubator/-?>)
defnilsafe
clojure.core.incubator/new-by-name 
(doc clojure.core.incubator/new-by-name )
(use 'racoon.server :reload)
(start)
(use 'racoon.server :reload)
(start)
(require 'ring.adapter.jetty)
(use 'racoon.server :reload)
(start )
(use 'racoon.server :reload)
(start )
(def s *1)
future
(doc future)
(doc delay)
s
(.close s)
(start )
(defmulti asdf identity)
(fn? asdf)
(ifn? 'asdf)
(ifn? :asdf)
all-ns
(all-ns)
(ns-name *ns*)
(ns-resolve 'racoon.model.menu 'model)
(ns-resolve *ns* 'model)
(use 'racoon.server :reload)
(use 'racoon.client :reload)
(use 'racoon.server :reload)
(use 'racoon.client :reload)
(use 'racoon.server :reload)
(init-models)
(use 'racoon.server :reload)
(init-models)
(use 'racoon.server :reload)
(init-models)
(use 'racoon.server :reload)
server/models
(use 'racoon.server :reload)
models
(require '[motif.core :as m])
(m/matches? [:get] [:get 1 2 3])
(m/matches? ^:! [:get] [:get 1 2 3])
(read-string "{:x 1}")
s
server
(defmulti x identity)
(type x)
(defn multifn?
  [any]
  (instance? clojure.lang.MultiFn any))
(multifn? x)
MultiFn
clojure.lang.MultiFn
s
(start)_
'#[:asdf]
'#[asdf]
'#db[asdf]
#db[asdf]
#db{:asdf 1}
#:db{:asdf 1}
#:db['asdf]
(use 'racoon.server :reload)
(start)_
(use 'racoon.server :reload)
(start)_
(def s *1)
s
(model/dispatch db/db-spec menu/model :get)
(ns-resolve 'racoon.model.menu 'model)
(use 'racoon.model.menu :reload)
(model/dispatch db/db-spec menu/model :get)
(use 'racoon.model.menu :reload)
(model/dispatch db/db-spec menu/model :get)
(use 'racoon.model.menu :reload)
(model/dispatch db/db-spec menu/model :get)
(use 'racoon.model.menu :reload)
(model/dispatch db/db-spec menu/model :get)
(use 'racoon.model.menu :reload)
(model/dispatch db/db-spec menu/model :get)
(use 'racoon.model.menu :reload) (use 'racoon.model :reload)
(model/dispatch db/db-spec menu/model :get)
(require '[transit.core])
(require '[cognitect.transit :as t])
(doc t/write)
(.stop s)
s
(use 'racoon.model.menu :reload) (use 'racoon.model :reload)
(use 'racoon.server :reload)
(start)
(use 'racoon.server :reload)
(def s *2)
s
(.stop s)
(def s (start))
(use 'racoon.server :reload)
(.stop s)
(def s (start))
(use 'racoon.server :reload)
(def s (start))
\
(use 'racoon.server :reload)
(.stop s)
(def s (start))
(use 'racoon.server :reload)
(def s (start))
(use 'racoon.server :reload)
(def s (start))
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(restart)
(def s (start))
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(restart)
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(restart)
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(restart)
(.stop s)
(restart)
(.stop s)
(restart)
(model/dispatch db/db-spec menu/model :get)
(-> *1 vals first vals first)
(use 'racoon.model.menu :reload)
(restart)
(start)
(def s *1)
(restart)
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(restart)
s
(start)
(source start)
(def s*3)
(doc server/serve)
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(restart)
s
(use 'racoon.server :reload)
(start)
(model/dispatch db/db-spec menu/model :get)
(start)
(model/dispatch db/db-spec menu/model :get)
(use 'racoon.database :reload)
(model/dispatch db/db-spec menu/model :get)
(restart)
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(restart)
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(def s nil)
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(restart)
(def s (start s))
(def s (start))
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(model/dispatch db/db-spec menu/model :get)
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(def s (start))
(model/dispatch db/db-spec menu/model :get)
(restart)
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(restart)
(doc cond->)
(cond-> inc fn? (apply 1))
(cond-> inc fn? (apply [1]))
(require '[motif.core :refer [matches?]])
(matches? [] ())
(matches? [1] ())
(matches? [] '(1))
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(use 'racoon.model.menu :reload)
(model/dispatch model)
(use 'racoon.database :reload)
(model/dispatch db-spec model)
(model/dispatch db-spec model :get)
(use 'racoon.model.menu :reload) (use 'racoon.model :reload)
(model/dispatch db-spec model :get)
(use 'racoon.model :reload)
(model/dispatch db-spec model :get)
(model/dispatch db-spec model :get)*e
(use 'racoon.model :reload)
(model/dispatch db-spec model :get)*e
(model/dispatch db-spec model :get)
(model/dispatch db-spec model :get)*e
(use 'racoon.model :reload)
(model/dispatch db-spec model :get)*e
(model/dispatch db-spec model :get)
*e
(use 'racoon.model :reload)
*e
(model/dispatch db-spec model :get)
(use 'racoon.model :reload)
(model/dispatch db-spec model :get)
(use 'racoon.model :reload)
(model/dispatch db-spec model :get)
(use 'racoon.model :reload)
asdf
(model/dispatch db-spec model :get)
asdf
(select-spec model :get [])
model
(get-in model [:api :get])
(use 'racoon.model :reload)
(get-in model [:api :get])
(model/dispatch db-spec model :get)
(use 'racoon.model :reload)
(model/dispatch db-spec model :get)
*e
(cond-> {} fn? (apply []))
(fn? {})
(cond-> {} map? (apply []))
(cond-> {} map? println)
(cond-> [] map? println)
(cond-> 1 true inc)
(cond-> 1 (pos?) inc)
(cond-> 1 (pos? 1) inc)
(use 'racoon.model :reload)
(cond-> 1 (pos? 1) inc)
(model/dispatch db-spec model :get)
(use 'racoon.model :reload)
(model/dispatch db-spec model :get)
(model/dispatch db-spec model :get 1)
'
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(def s (start)
(def s (start))
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(def s (start))
(merge {:x 1} {:x 2})
1/2
(def s (start))
(source map-indexed )
(start)
(comp inc dec)
(name nil)
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(def s (start))
(defn restart [] (.stop s) (use 'racoon.server :reload) (def s (start)))
(restart)
(def s (start))
(pr-str "asdf")
(pr "asdf")
(def s (start))
'
(restart)
(use 'artificer.server :reload)
(restart)
(start)
(model/dispatch menu/model :get)
(model/dispatch db-spec menu/model :get)
(use 'artificer.database )
(model/dispatch db-spec menu/model :get)
(def x *1)
(pprint x)
(pr-str x)
(read-string *1)
(pr-str x)
(pprint *1)
(vals x)
(map println (vals x))
(pr-str x)
(use 'artificer.model.menu :reload)
(restart)
(def s (start))
(use 'artificer.model.menu :reload)
(def s (start))
(restart)
x
(model/dispatch db-spec menu/model :get)
(use 'artificer.database )
(model/dispatch db-spec menu/model :get)
(def x *1)
(-> x vals)
(-> x vals first vals first)
(-> x vals first vals first first)
(-> x vals first vals first first pr-str)
(-> x vals first vals first first pr-str read-string)
(-> x vals (nth 2) vals first first pr-str read-string)
(-> x keys)
clojure.string/lower-case 
(model/dispatch db-spec menu/model :get)
(use 'artificer.model.menu :reload)
(restart)
(use 'artificer.model.menu :reload)
(restart)
(use 'artificer.model.menu :reload)
(restart)
(use 'artificer.model.menu :reload)
(restart)
(keyword "")
(use 'artificer.model.menu :reload)
(restart)
(use 'artificer.model.menu :reload)
(restart)
]
(.substring "asdf" 0 2)
(entrySet {})
removev
filterv
pr-str*
(doc partition)
has-nil?
(str nil)
(transient [])
nnext
(require '[flatland.ordered.map ])
(require '[flatland.ordered.map :refer [ordered-map]])
(ordered-map 1 2 3 4)
(assoc *1 1 10)
(dissoc (ordered-map 1 2 3 4) 1)
(assoc (dissoc (ordered-map 1 2 3 4) 1) 1 2)
(UUID/randomUUID)
#uuid
# uuid
random-sample 
(java.util.UUID/randomUUID)
(.replaceAll (.toString (java.util.UUID/randomUUID)) "\\-" "_")
(def x *1)
(def s (start))
(declare x)
x
(if x 1 2)
