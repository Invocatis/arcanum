["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$motif.core","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$compile-vector",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","~:line",125,"~:column",8,"~:end-line",125,"~:end-column",22,"~:private",true,"~:arglists",["~#list",["~$quote",["^H",[["~$pattern","~$accessor"]]]]]],"^F",true,"^7","~$motif.core/compile-vector","^A","target/doo/out/motif/core.cljc","^E",22,"~:method-params",["^H",[["^J","^K"]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^C",1,"~:variadic?",false,"^B",125,"~:ret-tag","~$function","^D",125,"~:max-fixed-arity",2,"~:fn-var",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"~$compile-seq",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",86,"^C",8,"^D",86,"^E",19,"^F",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"^F",true,"^7","~$motif.core/compile-seq","^A","target/doo/out/motif/core.cljc","^E",19,"^M",["^H",[["^J","^K"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",86,"^Q","^R","^D",86,"^S",2,"^T",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"~$compile-simple-vector",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",115,"^C",8,"^D",115,"^E",29,"^F",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"^F",true,"^7","~$motif.core/compile-simple-vector","^A","target/doo/out/motif/core.cljc","^E",29,"^M",["^H",[["^J","^K"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",115,"^Q","^R","^D",115,"^S",2,"^T",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"~$compile-simple-map",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",60,"^C",8,"^D",60,"^E",26,"^F",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"^F",true,"^7","~$motif.core/compile-simple-map","^A","target/doo/out/motif/core.cljc","^E",26,"^M",["^H",[["^J","^K"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",60,"^Q",["^6",[null,"~$any"]],"^D",60,"^S",2,"^T",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"~$compile-pattern",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",151,"^C",7,"^D",151,"^E",22,"^G",["^H",["^I",["^H",[["^J"],["^J","^K"]]]]],"~:top-fn",["^ ","^P",false,"~:fixed-arity",2,"^S",2,"^M",["^H",[["^J"],["^J","^K"]]],"^G",["^H",[["^J"],["^J","^K"]]],"^O",["^H",[null,null]]]],"^7","~$motif.core/compile-pattern","^A","target/doo/out/motif/core.cljc","^E",22,"^11",["^ ","^P",false,"^12",2,"^S",2,"^M",["^H",[["^J"],["^J","^K"]]],"^G",["^H",[["^J"],["^J","^K"]]],"^O",["^H",[null,null]]],"^M",["^H",[["^J"],["^J","^K"]]],"^N",null,"^12",2,"^O",["^H",[null,null]],"^C",1,"^P",false,"~:methods",[["^ ","^12",1,"^P",false,"~:tag","^["],["^ ","^12",2,"^P",false,"^15",["^6",[null,"^[","^R"]]]],"^B",151,"^D",151,"^S",2,"^T",true,"^G",["^H",[["^J"],["^J","^K"]]]],"~$match",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^E",16,"^11",["^ ","^P",true,"^12",3,"^S",3,"^M",["^H",[["~$expr"],["^17","~$default"]]],"^G",["^H",[["^17"],["^17","^18"],["^17","^J","~$result","~$&","~$statements"]]],"^O",["^H",[null,null,null]]],"^C",11,"^B",262,"~:macro",true,"^D",262,"^G",["^H",["^I",["^H",[["^17"],["^17","^18"],["^17","^J","^19","~$&","^1:"]]]]],"~:doc","Takes a subject expression, and a set of clauses.\n  Each clause should be of the form:\n\n    pattern resultant\n\n  For each clause, (match pattern expr) is performed. If it\n  returns logical true, the clause is a match and the resultant\n  is returned. A single default expression can follow the clauses\n  and its value will be returned if no clause matches. If no\n  default expression is provided, and no clause matches, nil will\n  be returned"],"^7","~$motif.core/match","^A","target/doo/out/motif/core.cljc","^E",16,"^11",["^ ","^P",true,"^12",3,"^S",3,"^M",["^H",[["^17"],["^17","^18"]]],"^G",["^H",[["^17"],["^17","^18"],["^17","^J","^19","~$&","^1:"]]],"^O",["^H",[null,null,null]]],"^M",["^H",[["^17"],["^17","^18"]]],"^N",null,"^12",3,"^O",["^H",[null,null,null]],"^C",1,"^P",true,"^14",[["^ ","^12",3,"^P",false,"^15","~$clj-nil"],["^ ","^12",4,"^P",false],["^ ","^12",3,"^P",true,"^15",["^6",["~$seq","~$cljs.core/IList"]]]],"^B",262,"^1;",true,"^D",262,"^S",3,"^T",false,"^G",["^H",[["^17"],["^17","^18"],["^17","^J","^19","~$&","^1:"]]],"^1<","Takes a subject expression, and a set of clauses.\n  Each clause should be of the form:\n\n    pattern resultant\n\n  For each clause, (match pattern expr) is performed. If it\n  returns logical true, the clause is a match and the resultant\n  is returned. A single default expression can follow the clauses\n  and its value will be returned if no clause matches. If no\n  default expression is provided, and no clause matches, nil will\n  be returned"],"~$compile-map",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",74,"^C",8,"^D",74,"^E",19,"^F",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"^F",true,"^7","~$motif.core/compile-map","^A","target/doo/out/motif/core.cljc","^E",19,"^M",["^H",[["^J","^K"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",74,"^Q",["^6",[null,"^[","^R"]],"^D",74,"^S",2,"^T",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"~$compile-element",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",54,"^C",8,"^D",54,"^E",23,"^F",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"^F",true,"^7","~$motif.core/compile-element","^A","target/doo/out/motif/core.cljc","^E",23,"^M",["^H",[["^J","^K"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",54,"^Q","^R","^D",54,"^S",2,"^T",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"~$and-pattern",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",10,"^C",8,"^D",10,"^E",19,"^F",true,"^G",["^H",["^I",["^H",[["~$p1","~$p2"]]]]]],"^F",true,"^7","~$motif.core/and-pattern","^A","target/doo/out/motif/core.cljc","^E",19,"^M",["^H",[["^1F","^1G"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",10,"^Q","^R","^D",10,"^S",2,"^T",true,"^G",["^H",["^I",["^H",[["^1F","^1G"]]]]]],"~$strict?",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",14,"^C",8,"^D",14,"^E",15,"^F",true,"^G",["^H",["^I",["^H",[["^J"]]]]]],"^F",true,"^7","~$motif.core/strict?","^A","target/doo/out/motif/core.cljc","^E",15,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",14,"^Q","^[","^D",14,"^S",1,"^T",true,"^G",["^H",["^I",["^H",[["^J"]]]]]],"~$_",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",5,"^C",7,"^D",5,"^E",8,"^G",["^H",["^I",["^H",[["^["]]]]]],"^7","~$motif.core/_","^A","target/doo/out/motif/core.cljc","^E",8,"^M",["^H",[["^["]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",5,"^Q","~$boolean","^D",5,"^S",1,"^T",true,"^G",["^H",["^I",["^H",[["^["]]]]]],"~$regex?",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",147,"^C",8,"^D",147,"^E",14,"^F",true,"^G",["^H",["^I",["^H",[["^["]]]]]],"^F",true,"^7","~$motif.core/regex?","^A","target/doo/out/motif/core.cljc","^E",14,"^M",["^H",[["^["]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",147,"^Q","^1L","^D",147,"^S",1,"^T",true,"^G",["^H",["^I",["^H",[["^["]]]]]],"~$compile-regex",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",139,"^C",8,"^D",139,"^E",21,"^F",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"^F",true,"^7","~$motif.core/compile-regex","^A","target/doo/out/motif/core.cljc","^E",21,"^M",["^H",[["^J","^K"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",139,"^Q","^R","^D",139,"^S",2,"^T",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"~$regex-type",["^ ","^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",145,"^C",16,"^D",145,"^E",26,"^F",true],"^F",true,"^7","~$motif.core/regex-type","^A","target/doo/out/motif/core.cljc","^E",26,"^C",1,"^B",145,"^D",145,"^15",["^6",["^[","^1>"]]],"~$compile-meta",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",18,"^C",8,"^D",18,"^E",20,"^F",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"^F",true,"^7","~$motif.core/compile-meta","^A","target/doo/out/motif/core.cljc","^E",20,"^M",["^H",[["^J","^K"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",18,"^Q","^R","^D",18,"^S",2,"^T",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"~$matches?",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",185,"^C",7,"^D",185,"^E",15,"^G",["^H",["^I",["^H",[["^J"],["^J","^17"]]]]],"^1<","Given a pattern, and an expression, recursively determines\n  if the expression matches the pattern.\n\n  For f, a function, and x, any expression:\n\n    (match f e) => (f e)\n\n  For vector patterns, each ordinal spot is checked:\n\n    (matches? [p0 p1 p2] [t0 t1 t2]) =>\n        [t0 t1 t2 ...]\n          ↑  ↑  ↑      matches?\n        [p0 p1 p2 ...]\n\n    Vectors ensure their targets are at least as long as they are.\n    Strict vectors must have identical lengths.\n\n  For lazy sequence patterns, like vectors, each oridnal spot is checked:\n\n    (matches? (p0 p1 p2) (t0 t1 t2)) =>\n        (t0 t1 t2 ...)\n          ↑  ↑  ↑      matches?\n        (p0 p1 p2 ...)\n\n    Lazy seqs targets can be shorter, or longer, than they are.\n    Infinite sequences can be used, though if they are matched against\n    inifinte targets, a infinte loop will happen\n\n  For m, a map with keyset {k1,k2,...,kn}, and n, a map:\n\n    (match m n) => (and (match (get m k1) (get n k1))\n                        (match (get m k2) (get n k2))\n                        ...\n\n    If the key is an ifn, it will be applied to the target instead.\n    Strict maps require that the pattern contains all keys of the target.\n\n  Set patterns are disjunctive, and only require one of their elements to match.\n\n    (match m n) => (or (match m0 n)\n                       (match m1 n)\n                       ...\n\n    Strict set patterns require exactly one element to match.\n\n  For any pattern not described above, equality is checked.\n\n    (match 1 2) => (= 1 2)\n\n  Given the expression passed matches the given pattern,\n  true will be returned. Otherwise, false will be returned.\n\n\n  Meta tag modifers can enhance and change how each pattern functions.\n\n    ^:!\n      Strict modifier is defined for each pattern type\n    ^:=\n      Equality modifier forces equality to be used, rather than matches?\n    {^:use f}\n      Use mofider forces f to be used as predicate, rather than matches?\n    ^:*\n      Star modifier maps pattern over target, expecting all to match\n    {^:meta m}\n      Meta modifier matches m to the meta of the target\n  ","^11",["^ ","^P",false,"^12",2,"^S",2,"^M",["^H",[["^J"],["^J","^17"]]],"^G",["^H",[["^J"],["^J","^17"]]],"^O",["^H",[null,null]]]],"^7","~$motif.core/matches?","^A","target/doo/out/motif/core.cljc","^E",15,"^11",["^ ","^P",false,"^12",2,"^S",2,"^M",["^H",[["^J"],["^J","^17"]]],"^G",["^H",[["^J"],["^J","^17"]]],"^O",["^H",[null,null]]],"^M",["^H",[["^J"],["^J","^17"]]],"^N",null,"^12",2,"^O",["^H",[null,null]],"^C",1,"^P",false,"^14",[["^ ","^12",1,"^P",false,"^15","^R"],["^ ","^12",2,"^P",false]],"^B",185,"^D",185,"^S",2,"^T",true,"^G",["^H",[["^J"],["^J","^17"]]],"^1<","Given a pattern, and an expression, recursively determines\n  if the expression matches the pattern.\n\n  For f, a function, and x, any expression:\n\n    (match f e) => (f e)\n\n  For vector patterns, each ordinal spot is checked:\n\n    (matches? [p0 p1 p2] [t0 t1 t2]) =>\n        [t0 t1 t2 ...]\n          ↑  ↑  ↑      matches?\n        [p0 p1 p2 ...]\n\n    Vectors ensure their targets are at least as long as they are.\n    Strict vectors must have identical lengths.\n\n  For lazy sequence patterns, like vectors, each oridnal spot is checked:\n\n    (matches? (p0 p1 p2) (t0 t1 t2)) =>\n        (t0 t1 t2 ...)\n          ↑  ↑  ↑      matches?\n        (p0 p1 p2 ...)\n\n    Lazy seqs targets can be shorter, or longer, than they are.\n    Infinite sequences can be used, though if they are matched against\n    inifinte targets, a infinte loop will happen\n\n  For m, a map with keyset {k1,k2,...,kn}, and n, a map:\n\n    (match m n) => (and (match (get m k1) (get n k1))\n                        (match (get m k2) (get n k2))\n                        ...\n\n    If the key is an ifn, it will be applied to the target instead.\n    Strict maps require that the pattern contains all keys of the target.\n\n  Set patterns are disjunctive, and only require one of their elements to match.\n\n    (match m n) => (or (match m0 n)\n                       (match m1 n)\n                       ...\n\n    Strict set patterns require exactly one element to match.\n\n  For any pattern not described above, equality is checked.\n\n    (match 1 2) => (= 1 2)\n\n  Given the expression passed matches the given pattern,\n  true will be returned. Otherwise, false will be returned.\n\n\n  Meta tag modifers can enhance and change how each pattern functions.\n\n    ^:!\n      Strict modifier is defined for each pattern type\n    ^:=\n      Equality modifier forces equality to be used, rather than matches?\n    {^:use f}\n      Use mofider forces f to be used as predicate, rather than matches?\n    ^:*\n      Star modifier maps pattern over target, expecting all to match\n    {^:meta m}\n      Meta modifier matches m to the meta of the target\n  "],"~$compile-question",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",33,"^C",8,"^D",33,"^E",24,"^F",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"^F",true,"^7","~$motif.core/compile-question","^A","target/doo/out/motif/core.cljc","^E",24,"^M",["^H",[["^J","^K"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",33,"^Q","^R","^D",33,"^S",2,"^T",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"~$compile-set",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",101,"^C",8,"^D",101,"^E",19,"^F",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"^F",true,"^7","~$motif.core/compile-set","^A","target/doo/out/motif/core.cljc","^E",19,"^M",["^H",[["^J","^K"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",101,"^Q","^R","^D",101,"^S",2,"^T",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"~$compile-star",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",24,"^C",8,"^D",24,"^E",20,"^F",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"^F",true,"^7","~$motif.core/compile-star","^A","target/doo/out/motif/core.cljc","^E",20,"^M",["^H",[["^J","^K"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",24,"^Q","^R","^D",24,"^S",2,"^T",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"~$compile-strict-question",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",42,"^C",8,"^D",42,"^E",31,"^F",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"^F",true,"^7","~$motif.core/compile-strict-question","^A","target/doo/out/motif/core.cljc","^E",31,"^M",["^H",[["^J","^K"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",42,"^Q","^R","^D",42,"^S",2,"^T",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"~$compile-use",["^ ","^?",null,"^@",["^ ","^A","/Users/ljc237-admin/Code/pos/arcanum/target/doo/out/motif/core.cljc","^B",50,"^C",8,"^D",50,"^E",19,"^F",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"^F",true,"^7","~$motif.core/compile-use","^A","target/doo/out/motif/core.cljc","^E",19,"^M",["^H",[["^J","^K"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",50,"^Q","^R","^D",50,"^S",2,"^T",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:*","^1=","^@","~:else","~:|","~:use","~:!?","~$if","~:?","~:getter","^1V","~:&","~:!","~:="]],"~:order",["~:!","^@","~:*","~:?","^2;","^2:","^29","^2=","~:|","~:&","~:=","^2<","^1V","^1="]],"^1<",null]